2023-02-04 14:28:24,185 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.8.0 (default, Nov  6 2019, 16:00:02) [MSC v.1916 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3080
CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2
NVCC: Cuda compilation tools, release 11.2, V11.2.152
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.29.30146 版
GCC: n/a
PyTorch: 1.12.0
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.0
OpenCV: 4.6.0
MMCV: 1.6.0
MMCV Compiler: MSVC 192930146
MMCV CUDA Compiler: 11.2
MMClassification: 0.23.2+unknown
------------------------------------------------------------

2023-02-04 14:28:24,185 - mmcls - INFO - Distributed training: False
2023-02-04 14:28:25,188 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='MobileNetV3', arch='large'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='StackedLinearClsHead',
        num_classes=5,
        in_channels=960,
        mid_channels=[1280],
        dropout_rate=0.2,
        act_cfg=dict(type='HSwish'),
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        init_cfg=dict(
            type='Normal', layer='Linear', mean=0.0, std=0.01, bias=0.0),
        topk=(1, 5)))
dataset_type = 'MyFlowerCapData'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224, backend='pillow'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='AutoAugment',
        policies=[[{
            'type': 'Posterize',
            'bits': 4,
            'prob': 0.4
        }, {
            'type': 'Rotate',
            'angle': 30.0,
            'prob': 0.6
        }],
                  [{
                      'type': 'Solarize',
                      'thr': 113.77777777777777,
                      'prob': 0.6
                  }, {
                      'type': 'AutoContrast',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.8
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Posterize',
                      'bits': 5,
                      'prob': 0.6
                  }, {
                      'type': 'Posterize',
                      'bits': 5,
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.4
                  }, {
                      'type': 'Solarize',
                      'thr': 142.22222222222223,
                      'prob': 0.2
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.4
                  }, {
                      'type': 'Rotate',
                      'angle': 26.666666666666668,
                      'prob': 0.8
                  }],
                  [{
                      'type': 'Solarize',
                      'thr': 170.66666666666666,
                      'prob': 0.6
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Posterize',
                      'bits': 6,
                      'prob': 0.8
                  }, {
                      'type': 'Equalize',
                      'prob': 1.0
                  }],
                  [{
                      'type': 'Rotate',
                      'angle': 10.0,
                      'prob': 0.2
                  }, {
                      'type': 'Solarize',
                      'thr': 28.444444444444443,
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.6
                  }, {
                      'type': 'Posterize',
                      'bits': 5,
                      'prob': 0.4
                  }],
                  [{
                      'type': 'Rotate',
                      'angle': 26.666666666666668,
                      'prob': 0.8
                  }, {
                      'type': 'ColorTransform',
                      'magnitude': 0.0,
                      'prob': 0.4
                  }],
                  [{
                      'type': 'Rotate',
                      'angle': 30.0,
                      'prob': 0.4
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.0
                  }, {
                      'type': 'Equalize',
                      'prob': 0.8
                  }],
                  [{
                      'type': 'Invert',
                      'prob': 0.6
                  }, {
                      'type': 'Equalize',
                      'prob': 1.0
                  }],
                  [{
                      'type': 'ColorTransform',
                      'magnitude': 0.4,
                      'prob': 0.6
                  }, {
                      'type': 'Contrast',
                      'magnitude': 0.8,
                      'prob': 1.0
                  }],
                  [{
                      'type': 'Rotate',
                      'angle': 26.666666666666668,
                      'prob': 0.8
                  }, {
                      'type': 'ColorTransform',
                      'magnitude': 0.2,
                      'prob': 1.0
                  }],
                  [{
                      'type': 'ColorTransform',
                      'magnitude': 0.8,
                      'prob': 0.8
                  }, {
                      'type': 'Solarize',
                      'thr': 56.888888888888886,
                      'prob': 0.8
                  }],
                  [{
                      'type': 'Sharpness',
                      'magnitude': 0.7,
                      'prob': 0.4
                  }, {
                      'type': 'Invert',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Shear',
                      'magnitude': 0.16666666666666666,
                      'prob': 0.6,
                      'direction': 'horizontal'
                  }, {
                      'type': 'Equalize',
                      'prob': 1.0
                  }],
                  [{
                      'type': 'ColorTransform',
                      'magnitude': 0.0,
                      'prob': 0.4
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.4
                  }, {
                      'type': 'Solarize',
                      'thr': 142.22222222222223,
                      'prob': 0.2
                  }],
                  [{
                      'type': 'Solarize',
                      'thr': 113.77777777777777,
                      'prob': 0.6
                  }, {
                      'type': 'AutoContrast',
                      'prob': 0.6
                  }],
                  [{
                      'type': 'Invert',
                      'prob': 0.6
                  }, {
                      'type': 'Equalize',
                      'prob': 1.0
                  }],
                  [{
                      'type': 'ColorTransform',
                      'magnitude': 0.4,
                      'prob': 0.6
                  }, {
                      'type': 'Contrast',
                      'magnitude': 0.8,
                      'prob': 1.0
                  }],
                  [{
                      'type': 'Equalize',
                      'prob': 0.8
                  }, {
                      'type': 'Equalize',
                      'prob': 0.6
                  }]]),
    dict(
        type='RandomErasing',
        erase_prob=0.2,
        mode='const',
        min_area_ratio=0.02,
        max_area_ratio=0.3333333333333333,
        fill_color=[123.675, 116.28, 103.53]),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1), backend='pillow'),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=64,
    workers_per_gpu=1,
    train=dict(
        type='MyFlowerCapData',
        data_prefix='../mmcls/data/flower_dataset_2/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='AutoAugment',
                policies=[[{
                    'type': 'Posterize',
                    'bits': 4,
                    'prob': 0.4
                }, {
                    'type': 'Rotate',
                    'angle': 30.0,
                    'prob': 0.6
                }],
                          [{
                              'type': 'Solarize',
                              'thr': 113.77777777777777,
                              'prob': 0.6
                          }, {
                              'type': 'AutoContrast',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.8
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Posterize',
                              'bits': 5,
                              'prob': 0.6
                          }, {
                              'type': 'Posterize',
                              'bits': 5,
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.4
                          }, {
                              'type': 'Solarize',
                              'thr': 142.22222222222223,
                              'prob': 0.2
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.4
                          }, {
                              'type': 'Rotate',
                              'angle': 26.666666666666668,
                              'prob': 0.8
                          }],
                          [{
                              'type': 'Solarize',
                              'thr': 170.66666666666666,
                              'prob': 0.6
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Posterize',
                              'bits': 6,
                              'prob': 0.8
                          }, {
                              'type': 'Equalize',
                              'prob': 1.0
                          }],
                          [{
                              'type': 'Rotate',
                              'angle': 10.0,
                              'prob': 0.2
                          }, {
                              'type': 'Solarize',
                              'thr': 28.444444444444443,
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.6
                          }, {
                              'type': 'Posterize',
                              'bits': 5,
                              'prob': 0.4
                          }],
                          [{
                              'type': 'Rotate',
                              'angle': 26.666666666666668,
                              'prob': 0.8
                          }, {
                              'type': 'ColorTransform',
                              'magnitude': 0.0,
                              'prob': 0.4
                          }],
                          [{
                              'type': 'Rotate',
                              'angle': 30.0,
                              'prob': 0.4
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.0
                          }, {
                              'type': 'Equalize',
                              'prob': 0.8
                          }],
                          [{
                              'type': 'Invert',
                              'prob': 0.6
                          }, {
                              'type': 'Equalize',
                              'prob': 1.0
                          }],
                          [{
                              'type': 'ColorTransform',
                              'magnitude': 0.4,
                              'prob': 0.6
                          }, {
                              'type': 'Contrast',
                              'magnitude': 0.8,
                              'prob': 1.0
                          }],
                          [{
                              'type': 'Rotate',
                              'angle': 26.666666666666668,
                              'prob': 0.8
                          }, {
                              'type': 'ColorTransform',
                              'magnitude': 0.2,
                              'prob': 1.0
                          }],
                          [{
                              'type': 'ColorTransform',
                              'magnitude': 0.8,
                              'prob': 0.8
                          }, {
                              'type': 'Solarize',
                              'thr': 56.888888888888886,
                              'prob': 0.8
                          }],
                          [{
                              'type': 'Sharpness',
                              'magnitude': 0.7,
                              'prob': 0.4
                          }, {
                              'type': 'Invert',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Shear',
                              'magnitude': 0.16666666666666666,
                              'prob': 0.6,
                              'direction': 'horizontal'
                          }, {
                              'type': 'Equalize',
                              'prob': 1.0
                          }],
                          [{
                              'type': 'ColorTransform',
                              'magnitude': 0.0,
                              'prob': 0.4
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.4
                          }, {
                              'type': 'Solarize',
                              'thr': 142.22222222222223,
                              'prob': 0.2
                          }],
                          [{
                              'type': 'Solarize',
                              'thr': 113.77777777777777,
                              'prob': 0.6
                          }, {
                              'type': 'AutoContrast',
                              'prob': 0.6
                          }],
                          [{
                              'type': 'Invert',
                              'prob': 0.6
                          }, {
                              'type': 'Equalize',
                              'prob': 1.0
                          }],
                          [{
                              'type': 'ColorTransform',
                              'magnitude': 0.4,
                              'prob': 0.6
                          }, {
                              'type': 'Contrast',
                              'magnitude': 0.8,
                              'prob': 1.0
                          }],
                          [{
                              'type': 'Equalize',
                              'prob': 0.8
                          }, {
                              'type': 'Equalize',
                              'prob': 0.6
                          }]]),
            dict(
                type='RandomErasing',
                erase_prob=0.2,
                mode='const',
                min_area_ratio=0.02,
                max_area_ratio=0.3333333333333333,
                fill_color=[123.675, 116.28, 103.53]),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='MyFlowerCapData',
        data_prefix='../mmcls/data/flower_dataset_2/valid',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='MyFlowerCapData',
        data_prefix='../mmcls/data/flower_dataset_2/valid',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=10, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
policies = [[{
    'type': 'Posterize',
    'bits': 4,
    'prob': 0.4
}, {
    'type': 'Rotate',
    'angle': 30.0,
    'prob': 0.6
}],
            [{
                'type': 'Solarize',
                'thr': 113.77777777777777,
                'prob': 0.6
            }, {
                'type': 'AutoContrast',
                'prob': 0.6
            }],
            [{
                'type': 'Equalize',
                'prob': 0.8
            }, {
                'type': 'Equalize',
                'prob': 0.6
            }],
            [{
                'type': 'Posterize',
                'bits': 5,
                'prob': 0.6
            }, {
                'type': 'Posterize',
                'bits': 5,
                'prob': 0.6
            }],
            [{
                'type': 'Equalize',
                'prob': 0.4
            }, {
                'type': 'Solarize',
                'thr': 142.22222222222223,
                'prob': 0.2
            }],
            [{
                'type': 'Equalize',
                'prob': 0.4
            }, {
                'type': 'Rotate',
                'angle': 26.666666666666668,
                'prob': 0.8
            }],
            [{
                'type': 'Solarize',
                'thr': 170.66666666666666,
                'prob': 0.6
            }, {
                'type': 'Equalize',
                'prob': 0.6
            }],
            [{
                'type': 'Posterize',
                'bits': 6,
                'prob': 0.8
            }, {
                'type': 'Equalize',
                'prob': 1.0
            }],
            [{
                'type': 'Rotate',
                'angle': 10.0,
                'prob': 0.2
            }, {
                'type': 'Solarize',
                'thr': 28.444444444444443,
                'prob': 0.6
            }],
            [{
                'type': 'Equalize',
                'prob': 0.6
            }, {
                'type': 'Posterize',
                'bits': 5,
                'prob': 0.4
            }],
            [{
                'type': 'Rotate',
                'angle': 26.666666666666668,
                'prob': 0.8
            }, {
                'type': 'ColorTransform',
                'magnitude': 0.0,
                'prob': 0.4
            }],
            [{
                'type': 'Rotate',
                'angle': 30.0,
                'prob': 0.4
            }, {
                'type': 'Equalize',
                'prob': 0.6
            }],
            [{
                'type': 'Equalize',
                'prob': 0.0
            }, {
                'type': 'Equalize',
                'prob': 0.8
            }],
            [{
                'type': 'Invert',
                'prob': 0.6
            }, {
                'type': 'Equalize',
                'prob': 1.0
            }],
            [{
                'type': 'ColorTransform',
                'magnitude': 0.4,
                'prob': 0.6
            }, {
                'type': 'Contrast',
                'magnitude': 0.8,
                'prob': 1.0
            }],
            [{
                'type': 'Rotate',
                'angle': 26.666666666666668,
                'prob': 0.8
            }, {
                'type': 'ColorTransform',
                'magnitude': 0.2,
                'prob': 1.0
            }],
            [{
                'type': 'ColorTransform',
                'magnitude': 0.8,
                'prob': 0.8
            }, {
                'type': 'Solarize',
                'thr': 56.888888888888886,
                'prob': 0.8
            }],
            [{
                'type': 'Sharpness',
                'magnitude': 0.7,
                'prob': 0.4
            }, {
                'type': 'Invert',
                'prob': 0.6
            }],
            [{
                'type': 'Shear',
                'magnitude': 0.16666666666666666,
                'prob': 0.6,
                'direction': 'horizontal'
            }, {
                'type': 'Equalize',
                'prob': 1.0
            }],
            [{
                'type': 'ColorTransform',
                'magnitude': 0.0,
                'prob': 0.4
            }, {
                'type': 'Equalize',
                'prob': 0.6
            }],
            [{
                'type': 'Equalize',
                'prob': 0.4
            }, {
                'type': 'Solarize',
                'thr': 142.22222222222223,
                'prob': 0.2
            }],
            [{
                'type': 'Solarize',
                'thr': 113.77777777777777,
                'prob': 0.6
            }, {
                'type': 'AutoContrast',
                'prob': 0.6
            }],
            [{
                'type': 'Invert',
                'prob': 0.6
            }, {
                'type': 'Equalize',
                'prob': 1.0
            }],
            [{
                'type': 'ColorTransform',
                'magnitude': 0.4,
                'prob': 0.6
            }, {
                'type': 'Contrast',
                'magnitude': 0.8,
                'prob': 1.0
            }],
            [{
                'type': 'Equalize',
                'prob': 0.8
            }, {
                'type': 'Equalize',
                'prob': 0.6
            }]]
optimizer = dict(
    type='Adam',
    lr=0.001,
    betas=(0.9, 0.999),
    eps=1e-08,
    weight_decay=0,
    amsgrad=False)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=2, gamma=0.973, by_epoch=True)
runner = dict(type='EpochBasedRunner', max_epochs=200)
work_dir = './work_dirs\myMBV3Flower'
gpu_ids = [0]

2023-02-04 14:28:25,204 - mmcls - INFO - Set random seed to 1977036868, deterministic: False
2023-02-04 14:28:25,291 - mmcls - INFO - initialize MobileNetV3 with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d'], 'nonlinearity': 'leaky_relu'}, {'type': 'Normal', 'layer': ['Linear'], 'std': 0.01}, {'type': 'Constant', 'layer': ['BatchNorm2d'], 'val': 1}]
Name of parameter - Initialization information

backbone.layer0.conv.weight - torch.Size([16, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer0.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer0.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.depthwise_conv.conv.weight - torch.Size([16, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.depthwise_conv.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.depthwise_conv.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.linear_conv.conv.weight - torch.Size([16, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.linear_conv.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.linear_conv.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.expand_conv.conv.weight - torch.Size([64, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.expand_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.expand_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.depthwise_conv.conv.weight - torch.Size([64, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.depthwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.depthwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.linear_conv.conv.weight - torch.Size([24, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.linear_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.linear_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.expand_conv.conv.weight - torch.Size([72, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.expand_conv.bn.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.expand_conv.bn.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.depthwise_conv.conv.weight - torch.Size([72, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.depthwise_conv.bn.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.depthwise_conv.bn.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.linear_conv.conv.weight - torch.Size([24, 72, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.linear_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.linear_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.expand_conv.conv.weight - torch.Size([72, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.expand_conv.bn.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.expand_conv.bn.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.depthwise_conv.conv.weight - torch.Size([72, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.depthwise_conv.bn.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.depthwise_conv.bn.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.se.conv1.conv.weight - torch.Size([24, 72, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.se.conv1.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.se.conv2.conv.weight - torch.Size([72, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.se.conv2.conv.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.linear_conv.conv.weight - torch.Size([40, 72, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.expand_conv.bn.weight - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.expand_conv.bn.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.depthwise_conv.bn.weight - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.depthwise_conv.bn.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.se.conv1.conv.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.se.conv2.conv.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.linear_conv.conv.weight - torch.Size([40, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.expand_conv.bn.weight - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.expand_conv.bn.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.depthwise_conv.bn.weight - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.depthwise_conv.bn.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.se.conv1.conv.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.se.conv2.conv.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.linear_conv.conv.weight - torch.Size([40, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.expand_conv.conv.weight - torch.Size([240, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.expand_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.expand_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.depthwise_conv.conv.weight - torch.Size([240, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.depthwise_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.depthwise_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.linear_conv.conv.weight - torch.Size([80, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.linear_conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.linear_conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.expand_conv.conv.weight - torch.Size([200, 80, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.expand_conv.bn.weight - torch.Size([200]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.expand_conv.bn.bias - torch.Size([200]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.depthwise_conv.conv.weight - torch.Size([200, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.depthwise_conv.bn.weight - torch.Size([200]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.depthwise_conv.bn.bias - torch.Size([200]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.linear_conv.conv.weight - torch.Size([80, 200, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.linear_conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.linear_conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.expand_conv.conv.weight - torch.Size([184, 80, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.expand_conv.bn.weight - torch.Size([184]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.expand_conv.bn.bias - torch.Size([184]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.depthwise_conv.conv.weight - torch.Size([184, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.depthwise_conv.bn.weight - torch.Size([184]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.depthwise_conv.bn.bias - torch.Size([184]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.linear_conv.conv.weight - torch.Size([80, 184, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.linear_conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.linear_conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.expand_conv.conv.weight - torch.Size([184, 80, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.expand_conv.bn.weight - torch.Size([184]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.expand_conv.bn.bias - torch.Size([184]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.depthwise_conv.conv.weight - torch.Size([184, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.depthwise_conv.bn.weight - torch.Size([184]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.depthwise_conv.bn.bias - torch.Size([184]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.linear_conv.conv.weight - torch.Size([80, 184, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.linear_conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.linear_conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.expand_conv.conv.weight - torch.Size([480, 80, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.expand_conv.bn.weight - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.expand_conv.bn.bias - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.depthwise_conv.conv.weight - torch.Size([480, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.depthwise_conv.bn.weight - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.depthwise_conv.bn.bias - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.se.conv1.conv.weight - torch.Size([120, 480, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.se.conv1.conv.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.se.conv2.conv.weight - torch.Size([480, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.se.conv2.conv.bias - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.linear_conv.conv.weight - torch.Size([112, 480, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.linear_conv.bn.weight - torch.Size([112]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.linear_conv.bn.bias - torch.Size([112]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.expand_conv.conv.weight - torch.Size([672, 112, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer12.expand_conv.bn.weight - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.expand_conv.bn.bias - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.depthwise_conv.conv.weight - torch.Size([672, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer12.depthwise_conv.bn.weight - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.depthwise_conv.bn.bias - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.se.conv1.conv.weight - torch.Size([168, 672, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer12.se.conv1.conv.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.se.conv2.conv.weight - torch.Size([672, 168, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer12.se.conv2.conv.bias - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.linear_conv.conv.weight - torch.Size([112, 672, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer12.linear_conv.bn.weight - torch.Size([112]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.linear_conv.bn.bias - torch.Size([112]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer13.expand_conv.conv.weight - torch.Size([672, 112, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer13.expand_conv.bn.weight - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer13.expand_conv.bn.bias - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer13.depthwise_conv.conv.weight - torch.Size([672, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer13.depthwise_conv.bn.weight - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer13.depthwise_conv.bn.bias - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer13.se.conv1.conv.weight - torch.Size([168, 672, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer13.se.conv1.conv.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer13.se.conv2.conv.weight - torch.Size([672, 168, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer13.se.conv2.conv.bias - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer13.linear_conv.conv.weight - torch.Size([160, 672, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer13.linear_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer13.linear_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer14.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer14.expand_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer14.expand_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer14.depthwise_conv.conv.weight - torch.Size([960, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer14.depthwise_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer14.depthwise_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer14.se.conv1.conv.weight - torch.Size([240, 960, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer14.se.conv1.conv.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer14.se.conv2.conv.weight - torch.Size([960, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer14.se.conv2.conv.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer14.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer14.linear_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer14.linear_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer15.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer15.expand_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer15.expand_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer15.depthwise_conv.conv.weight - torch.Size([960, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer15.depthwise_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer15.depthwise_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer15.se.conv1.conv.weight - torch.Size([240, 960, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer15.se.conv1.conv.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer15.se.conv2.conv.weight - torch.Size([960, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer15.se.conv2.conv.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer15.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer15.linear_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer15.linear_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer16.conv.weight - torch.Size([960, 160, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer16.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer16.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.0.fc.weight - torch.Size([1280, 960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.0.fc.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.1.fc.weight - torch.Size([5, 1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.1.fc.bias - torch.Size([5]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
2023-02-04 14:28:26,602 - mmcls - INFO - Start running, host: WDQ@winterQ, work_dir: D:\ACpycharm\myProjeycs\mmclassification-master\tools\work_dirs\myMBV3Flower
2023-02-04 14:28:26,602 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 14:28:26,602 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2023-02-04 14:28:26,602 - mmcls - INFO - Checkpoints will be saved to D:\ACpycharm\myProjeycs\mmclassification-master\tools\work_dirs\myMBV3Flower by HardDiskBackend.
2023-02-04 14:28:40,277 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-04 14:28:49,437 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-04 14:28:58,458 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-04 14:29:07,590 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-04 14:29:16,675 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 14:29:25,866 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 14:29:35,051 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 14:29:44,250 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 14:29:53,397 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 14:30:02,583 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 14:30:07,008 - mmcls - INFO - Epoch(val) [10][14]	accuracy_top-1: 31.1111, accuracy_top-5: 100.0000
2023-02-04 14:30:15,959 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-04 14:30:25,193 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-04 14:30:34,355 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-04 14:30:43,497 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-04 14:30:52,631 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-04 14:31:01,930 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-04 14:31:16,203 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-04 14:31:33,682 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-04 14:31:50,548 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-04 14:32:06,716 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-04 14:32:11,374 - mmcls - INFO - Epoch(val) [20][14]	accuracy_top-1: 74.5029, accuracy_top-5: 100.0000
2023-02-04 14:32:28,266 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-04 14:32:45,457 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-04 14:33:02,900 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-04 14:33:19,250 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-04 14:33:34,986 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-04 14:33:50,907 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-04 14:34:06,857 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-04 14:34:22,719 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-04 14:34:38,832 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-04 14:34:54,916 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-04 14:34:59,048 - mmcls - INFO - Epoch(val) [30][14]	accuracy_top-1: 82.6901, accuracy_top-5: 100.0000
2023-02-04 14:35:14,597 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-04 14:35:30,497 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-04 14:35:46,377 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-04 14:36:02,321 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-04 14:36:17,998 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-04 14:36:34,246 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-04 14:36:50,522 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-04 14:37:06,803 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-04 14:37:23,336 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-04 14:37:39,260 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-04 14:37:43,393 - mmcls - INFO - Epoch(val) [40][14]	accuracy_top-1: 81.9883, accuracy_top-5: 100.0000
2023-02-04 14:37:59,344 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-04 14:38:15,371 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-04 14:38:31,082 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-04 14:38:46,799 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-04 14:39:02,723 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-04 14:39:18,503 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-04 14:39:34,071 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-04 14:39:49,981 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-04 14:40:05,602 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-04 14:40:21,264 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-04 14:40:25,356 - mmcls - INFO - Epoch(val) [50][14]	accuracy_top-1: 83.8596, accuracy_top-5: 100.0000
2023-02-04 14:40:40,662 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-04 14:40:56,639 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-04 14:41:12,367 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-04 14:41:28,327 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-04 14:41:44,083 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-04 14:41:56,774 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-04 14:42:06,427 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-04 14:42:16,173 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-04 14:42:30,700 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-04 14:42:46,444 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-04 14:42:50,507 - mmcls - INFO - Epoch(val) [60][14]	accuracy_top-1: 87.4854, accuracy_top-5: 100.0000
2023-02-04 14:43:05,984 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-04 14:43:21,697 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-04 14:43:37,641 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-04 14:43:53,238 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-04 14:44:08,790 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-04 14:44:24,602 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-04 14:44:40,421 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-04 14:44:56,281 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-04 14:45:12,061 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-04 14:45:27,813 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-04 14:45:31,874 - mmcls - INFO - Epoch(val) [70][14]	accuracy_top-1: 83.5088, accuracy_top-5: 100.0000
2023-02-04 14:45:47,571 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-04 14:46:03,537 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-04 14:46:19,843 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-04 14:46:36,520 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-04 14:46:52,966 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-04 14:47:09,161 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-04 14:47:24,914 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-04 14:47:40,855 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-04 14:47:56,701 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-04 14:48:12,695 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-04 14:48:16,764 - mmcls - INFO - Epoch(val) [80][14]	accuracy_top-1: 87.8363, accuracy_top-5: 100.0000
2023-02-04 14:48:32,008 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-04 14:48:47,928 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-04 14:49:03,863 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-04 14:49:19,800 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-04 14:49:35,612 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-04 14:49:51,301 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-04 14:50:07,148 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-04 14:50:23,037 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-04 14:50:39,458 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-04 14:50:55,498 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-04 14:50:59,612 - mmcls - INFO - Epoch(val) [90][14]	accuracy_top-1: 87.3684, accuracy_top-5: 100.0000
2023-02-04 14:51:15,166 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-04 14:51:31,120 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-04 14:51:46,957 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-04 14:52:03,078 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-04 14:52:19,034 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-04 14:52:35,454 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-04 14:52:51,460 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-04 14:53:07,648 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-04 14:53:23,425 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-04 14:53:39,229 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-04 14:53:43,346 - mmcls - INFO - Epoch(val) [100][14]	accuracy_top-1: 87.1345, accuracy_top-5: 100.0000
2023-02-04 14:53:59,165 - mmcls - INFO - Saving checkpoint at 101 epochs
2023-02-04 14:54:14,958 - mmcls - INFO - Saving checkpoint at 102 epochs
2023-02-04 14:54:32,344 - mmcls - INFO - Saving checkpoint at 103 epochs
2023-02-04 14:54:48,345 - mmcls - INFO - Saving checkpoint at 104 epochs
2023-02-04 14:55:04,219 - mmcls - INFO - Saving checkpoint at 105 epochs
2023-02-04 14:55:17,360 - mmcls - INFO - Saving checkpoint at 106 epochs
2023-02-04 14:55:27,108 - mmcls - INFO - Saving checkpoint at 107 epochs
2023-02-04 14:55:36,867 - mmcls - INFO - Saving checkpoint at 108 epochs
2023-02-04 14:55:47,729 - mmcls - INFO - Saving checkpoint at 109 epochs
2023-02-04 14:56:03,847 - mmcls - INFO - Saving checkpoint at 110 epochs
2023-02-04 14:56:07,972 - mmcls - INFO - Epoch(val) [110][14]	accuracy_top-1: 89.0059, accuracy_top-5: 100.0000
2023-02-04 14:56:23,673 - mmcls - INFO - Saving checkpoint at 111 epochs
2023-02-04 14:56:39,614 - mmcls - INFO - Saving checkpoint at 112 epochs
2023-02-04 14:56:55,288 - mmcls - INFO - Saving checkpoint at 113 epochs
2023-02-04 14:57:11,371 - mmcls - INFO - Saving checkpoint at 114 epochs
2023-02-04 14:57:27,885 - mmcls - INFO - Saving checkpoint at 115 epochs
2023-02-04 14:57:44,097 - mmcls - INFO - Saving checkpoint at 116 epochs
2023-02-04 14:58:00,220 - mmcls - INFO - Saving checkpoint at 117 epochs
2023-02-04 14:58:16,317 - mmcls - INFO - Saving checkpoint at 118 epochs
2023-02-04 14:58:32,514 - mmcls - INFO - Saving checkpoint at 119 epochs
2023-02-04 14:58:48,629 - mmcls - INFO - Saving checkpoint at 120 epochs
2023-02-04 14:58:52,844 - mmcls - INFO - Epoch(val) [120][14]	accuracy_top-1: 88.8889, accuracy_top-5: 100.0000
2023-02-04 14:59:08,507 - mmcls - INFO - Saving checkpoint at 121 epochs
2023-02-04 14:59:24,723 - mmcls - INFO - Saving checkpoint at 122 epochs
2023-02-04 14:59:40,670 - mmcls - INFO - Saving checkpoint at 123 epochs
2023-02-04 14:59:56,852 - mmcls - INFO - Saving checkpoint at 124 epochs
2023-02-04 15:00:12,315 - mmcls - INFO - Saving checkpoint at 125 epochs
2023-02-04 15:00:27,739 - mmcls - INFO - Saving checkpoint at 126 epochs
2023-02-04 15:00:43,218 - mmcls - INFO - Saving checkpoint at 127 epochs
2023-02-04 15:00:58,516 - mmcls - INFO - Saving checkpoint at 128 epochs
2023-02-04 15:01:13,930 - mmcls - INFO - Saving checkpoint at 129 epochs
2023-02-04 15:01:25,092 - mmcls - INFO - Saving checkpoint at 130 epochs
2023-02-04 15:01:27,470 - mmcls - INFO - Epoch(val) [130][14]	accuracy_top-1: 88.1871, accuracy_top-5: 100.0000
2023-02-04 15:01:36,577 - mmcls - INFO - Saving checkpoint at 131 epochs
2023-02-04 15:01:46,072 - mmcls - INFO - Saving checkpoint at 132 epochs
2023-02-04 15:01:55,345 - mmcls - INFO - Saving checkpoint at 133 epochs
2023-02-04 15:02:08,313 - mmcls - INFO - Saving checkpoint at 134 epochs
2023-02-04 15:02:23,959 - mmcls - INFO - Saving checkpoint at 135 epochs
2023-02-04 15:02:39,887 - mmcls - INFO - Saving checkpoint at 136 epochs
2023-02-04 15:02:55,486 - mmcls - INFO - Saving checkpoint at 137 epochs
2023-02-04 15:03:11,688 - mmcls - INFO - Saving checkpoint at 138 epochs
2023-02-04 15:03:27,364 - mmcls - INFO - Saving checkpoint at 139 epochs
2023-02-04 15:03:43,284 - mmcls - INFO - Saving checkpoint at 140 epochs
2023-02-04 15:03:47,370 - mmcls - INFO - Epoch(val) [140][14]	accuracy_top-1: 88.5380, accuracy_top-5: 100.0000
2023-02-04 15:04:02,450 - mmcls - INFO - Saving checkpoint at 141 epochs
2023-02-04 15:04:17,738 - mmcls - INFO - Saving checkpoint at 142 epochs
2023-02-04 15:04:33,191 - mmcls - INFO - Saving checkpoint at 143 epochs
2023-02-04 15:04:48,668 - mmcls - INFO - Saving checkpoint at 144 epochs
2023-02-04 15:05:04,153 - mmcls - INFO - Saving checkpoint at 145 epochs
2023-02-04 15:05:19,671 - mmcls - INFO - Saving checkpoint at 146 epochs
2023-02-04 15:05:35,152 - mmcls - INFO - Saving checkpoint at 147 epochs
2023-02-04 15:05:50,483 - mmcls - INFO - Saving checkpoint at 148 epochs
2023-02-04 15:06:05,983 - mmcls - INFO - Saving checkpoint at 149 epochs
2023-02-04 15:06:21,271 - mmcls - INFO - Saving checkpoint at 150 epochs
2023-02-04 15:06:25,236 - mmcls - INFO - Epoch(val) [150][14]	accuracy_top-1: 88.3041, accuracy_top-5: 100.0000
2023-02-04 15:06:34,700 - mmcls - INFO - Saving checkpoint at 151 epochs
2023-02-04 15:06:44,157 - mmcls - INFO - Saving checkpoint at 152 epochs
2023-02-04 15:06:59,725 - mmcls - INFO - Saving checkpoint at 153 epochs
2023-02-04 15:07:15,267 - mmcls - INFO - Saving checkpoint at 154 epochs
2023-02-04 15:07:30,882 - mmcls - INFO - Saving checkpoint at 155 epochs
2023-02-04 15:07:46,335 - mmcls - INFO - Saving checkpoint at 156 epochs
2023-02-04 15:08:01,964 - mmcls - INFO - Saving checkpoint at 157 epochs
2023-02-04 15:08:17,835 - mmcls - INFO - Saving checkpoint at 158 epochs
2023-02-04 15:08:33,367 - mmcls - INFO - Saving checkpoint at 159 epochs
2023-02-04 15:08:48,519 - mmcls - INFO - Saving checkpoint at 160 epochs
2023-02-04 15:08:52,474 - mmcls - INFO - Epoch(val) [160][14]	accuracy_top-1: 89.1228, accuracy_top-5: 100.0000
2023-02-04 15:09:07,398 - mmcls - INFO - Saving checkpoint at 161 epochs
2023-02-04 15:09:22,711 - mmcls - INFO - Saving checkpoint at 162 epochs
2023-02-04 15:09:38,069 - mmcls - INFO - Saving checkpoint at 163 epochs
2023-02-04 15:09:53,656 - mmcls - INFO - Saving checkpoint at 164 epochs
2023-02-04 15:10:08,979 - mmcls - INFO - Saving checkpoint at 165 epochs
2023-02-04 15:10:24,446 - mmcls - INFO - Saving checkpoint at 166 epochs
2023-02-04 15:10:39,615 - mmcls - INFO - Saving checkpoint at 167 epochs
2023-02-04 15:10:54,893 - mmcls - INFO - Saving checkpoint at 168 epochs
2023-02-04 15:11:10,217 - mmcls - INFO - Saving checkpoint at 169 epochs
2023-02-04 15:11:25,008 - mmcls - INFO - Saving checkpoint at 170 epochs
2023-02-04 15:11:27,659 - mmcls - INFO - Epoch(val) [170][14]	accuracy_top-1: 89.3567, accuracy_top-5: 100.0000
2023-02-04 15:11:36,727 - mmcls - INFO - Saving checkpoint at 171 epochs
2023-02-04 15:11:49,868 - mmcls - INFO - Saving checkpoint at 172 epochs
2023-02-04 15:12:04,943 - mmcls - INFO - Saving checkpoint at 173 epochs
2023-02-04 15:12:20,326 - mmcls - INFO - Saving checkpoint at 174 epochs
2023-02-04 15:12:35,855 - mmcls - INFO - Saving checkpoint at 175 epochs
2023-02-04 15:12:51,259 - mmcls - INFO - Saving checkpoint at 176 epochs
2023-02-04 15:13:06,799 - mmcls - INFO - Saving checkpoint at 177 epochs
2023-02-04 15:13:22,307 - mmcls - INFO - Saving checkpoint at 178 epochs
2023-02-04 15:13:37,706 - mmcls - INFO - Saving checkpoint at 179 epochs
2023-02-04 15:13:53,030 - mmcls - INFO - Saving checkpoint at 180 epochs
2023-02-04 15:13:56,943 - mmcls - INFO - Epoch(val) [180][14]	accuracy_top-1: 89.2398, accuracy_top-5: 100.0000
2023-02-04 15:14:11,874 - mmcls - INFO - Saving checkpoint at 181 epochs
2023-02-04 15:14:27,230 - mmcls - INFO - Saving checkpoint at 182 epochs
2023-02-04 15:14:42,729 - mmcls - INFO - Saving checkpoint at 183 epochs
2023-02-04 15:14:57,949 - mmcls - INFO - Saving checkpoint at 184 epochs
2023-02-04 15:15:13,345 - mmcls - INFO - Saving checkpoint at 185 epochs
2023-02-04 15:15:28,601 - mmcls - INFO - Saving checkpoint at 186 epochs
2023-02-04 15:15:44,157 - mmcls - INFO - Saving checkpoint at 187 epochs
2023-02-04 15:15:59,507 - mmcls - INFO - Saving checkpoint at 188 epochs
2023-02-04 15:16:14,914 - mmcls - INFO - Saving checkpoint at 189 epochs
2023-02-04 15:16:30,295 - mmcls - INFO - Saving checkpoint at 190 epochs
2023-02-04 15:16:34,235 - mmcls - INFO - Epoch(val) [190][14]	accuracy_top-1: 90.2924, accuracy_top-5: 100.0000
2023-02-04 15:16:49,464 - mmcls - INFO - Saving checkpoint at 191 epochs
2023-02-04 15:17:04,827 - mmcls - INFO - Saving checkpoint at 192 epochs
2023-02-04 15:17:20,302 - mmcls - INFO - Saving checkpoint at 193 epochs
2023-02-04 15:17:36,067 - mmcls - INFO - Saving checkpoint at 194 epochs
2023-02-04 15:17:51,470 - mmcls - INFO - Saving checkpoint at 195 epochs
2023-02-04 15:18:06,799 - mmcls - INFO - Saving checkpoint at 196 epochs
2023-02-04 15:18:22,128 - mmcls - INFO - Saving checkpoint at 197 epochs
2023-02-04 15:18:37,306 - mmcls - INFO - Saving checkpoint at 198 epochs
2023-02-04 15:18:52,850 - mmcls - INFO - Saving checkpoint at 199 epochs
2023-02-04 15:19:08,455 - mmcls - INFO - Saving checkpoint at 200 epochs
2023-02-04 15:19:12,288 - mmcls - INFO - Epoch(val) [200][14]	accuracy_top-1: 89.4737, accuracy_top-5: 100.0000
